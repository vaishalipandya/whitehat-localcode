using System;
using System.Collections.Generic;
using System.Configuration;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Text;
using System.Windows.Forms;
using WhiteHatSec.Entity;
using WhiteHatSec.Localization.Culture.Resource;
using WhiteHatSec.VSIX.Utility;
using WhiteHatSec.Services;
using log4net;
using StatusBar = EnvDTE.StatusBar;
using System.ComponentModel;
using System.IO;
using Microsoft.VisualStudio.PlatformUI;
using System.Drawing;

namespace WhiteHatSec.VSIX.UserControls.Search
{
    /// <summary>
    ///     Search Vulnerability
    /// </summary>
    public partial class SearchVulnerability : BaseControl.BaseControl
    {
        #region "Constructor"
        /// <summary>
        ///     Initializes a new instance of the <see /> class.
        /// </summary>
        public SearchVulnerability()
        {
            try
            {
                InitializeComponent();
                BindApplication();
                appsDdl.DropDownWidth = DropDownWidth(appsDdl);
                dataGridViewVulnsData.AllowUserToAddRows = false;
                SetStyle(ControlStyles.SupportsTransparentBackColor, true);
                SetDefaultColors();
                VSColorTheme.ThemeChanged += VSColorTheme_ThemeChanged;
                this.Paint += new System.Windows.Forms.PaintEventHandler(this.SearchVulnerability_DrawItem);
            }
            catch (Exception ex)
            {
                Log.Error("**** Error Occured On InitializeComponent ***** ", ex);
            }
        }

        #endregion

        #region "Properties"
       
        
        /// <summary>
        ///     Gets the form that the container control is assigned to.
        /// </summary>       

        public WhsMainWindow SearchWhiteHatWindow;

        /// <summary>
        ///     Gets or sets vulnerability Trace Info
        /// </summary>
        /// <value>
        ///     The WHS finding window.
        /// </value>
        public VulnerabilityTrace VulnerabilityTraceInfo { get; set; }

        /// <summary>
        ///     The application vulns data.
        /// </summary>
        public ApplicationVulnerabilityInfo.AppsVulnsData AppVulns = new ApplicationVulnerabilityInfo.AppsVulnsData();
        /// <summary>
        /// Log Instance
        /// </summary>
        private static readonly ILog Log = LogManager.GetLogger
            (MethodBase.GetCurrentMethod().DeclaringType);

        /// <summary>
        /// Status Bar For  vuln Count
        /// </summary>
        private StatusBar totalVuln;

        #endregion

        #region "Events"
        void SearchVulnerability_DrawItem(object sender, PaintEventArgs e)
        {
            Rectangle rect = new Rectangle(appsDdl.Location.X - 1, appsDdl.Location.Y - 1, appsDdl.Width + 1, appsDdl.Height + 1);
            Pen pen = new Pen(CurrentThemeBorderColor, 8);
            Graphics g = e.Graphics;
            g.DrawRectangle(pen, rect);
            appsDdl.Refresh();
        }


        /// <summary>
        ///     Handles the Load event of the FindVulnsSearch control to load search form.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        private void FindVulnsSearch_Load(object sender, EventArgs e)
        {
            try
            {
                BindState();
                BindSeverity();
                customDateTimePickerFromDate.Value = null;
                customDateTimePickerToDate.Value = null;
            }
            catch (Exception ex)
            {
                Log.Error("**** Error Occured On Load ***** ", ex);
            }
        }

        /// <summary>
        ///     Handles the Click event of the pictureBoxVulnsSearch control to search vuln .
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        private void PictureBoxVulnsSearch_Click(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                Log.Info("****Going to bind after searching Vulns of App in Find Vulns tab****");
                SetSearchCriteria();
                Cursor.Current = Cursors.Default;

                this.dataGridViewVulnsData.Sort(this.ColumnVulnId, ListSortDirection.Ascending);
            }
            catch (Exception ex)
            {
                Cursor.Current = Cursors.Default;
                Log.Error("**** Error Occured On Searching of Find Vulns.tab ***** ", ex);
                MessageBox.Show(@"Error Occured on Search Click.", MessageLog.ErrorMessage, MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        /// <summary>
        ///     Handles the Click event of the pictureBoxFilter control to filter vuln.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        private void PictureBoxFilter_Click(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                Log.Info("****Going to bind after Filtering Vulns of App in Find Vulns tab****");
                txtFilter.Text = string.Empty;
                SetSearchCriteria();
                Cursor.Current = Cursors.Default;
            }
            catch (Exception ex)
            {
                Cursor.Current = Cursors.Default;
                Log.Error("**** Error Occured On Filtering of Find Vulns.tab ***** ", ex);
                MessageBox.Show(@"Error Occured on Filter Reset.", MessageLog.ErrorMessage, MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        /// <summary>
        ///     Handles the Text Changed event of the txtFilter control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        private void TxtFilter_TextChanged(object sender, EventArgs e)
        {
            try
            {
                string filterText = txtFilter.Text.Trim();
                //Check for if vuln data for application found 
                if (AppVulns == null)
                {
                    return;
                }
                //ReBind  data if filter textbox is empty
                if (string.IsNullOrEmpty(filterText))
                {
                    BindAppVuln(AppVulns.Collection);
                }
                else
                {
                    //Filter data in all field if filter textbox having some value
                    Log.InfoFormat("****Going to filter Vulns. List by Filter Key : '{0}'****", filterText);
                    List<ApplicationVulnerabilityInfo.AppsVulnsDataCollection> appsVulnsDataCollection =
                        FilterVuln(filterText, AppVulns.Collection);

                    BindAppVuln(appsVulnsDataCollection);
                }

            }
            catch (Exception ex)
            {
                Log.Error("**** Error Occured On Changing of Filter textbox in Find Vulns.tab ***** ", ex);
            }
        }

        /// <summary>
        ///     Handles the Cell Double Click event of the dataGridViewVulnsData control to add vuln to list.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="DataGridViewCellEventArgs" /> instance containing the event data.</param>
        private void DataGridViewVulnsData_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            string vulnId;
            try
            {
                if (e.RowIndex == -1)
                {
                    return;
                }
                Cursor.Current = Cursors.WaitCursor;
                vulnId = Convert.ToString(dataGridViewVulnsData.Rows[e.RowIndex].Cells[1].Value);
                Log.InfoFormat("****Double Clicked on VulnId : {0} in Find Vulns. tab****", vulnId);
                if (string.IsNullOrEmpty(vulnId))
                {
                    Cursor.Current = Cursors.Default;
                    return;
                }

                BaseInstance.ActiveVulnId = vulnId;
                //If vuln id not exist in previously added vuln list then add it to list

                VulnerabilityInfo.Vulnerability vulnerability = GetVulnDetailsInfo(vulnId);
                if (BaseInstance.VulnerabilityList.Exists(x => x.Id == Convert.ToInt32(vulnId)))
                {
                    BaseInstance.VulnerabilityList.Remove(BaseInstance.VulnerabilityList.Find(x => x.Id == Convert.ToInt32(vulnId)));
                }
                BaseInstance.VulnerabilityList = AddVulnDetail(vulnerability, BaseInstance.VulnerabilityList);

                Log.InfoFormat("****Going to bind Data according Vuln. Id : {0} of Whitehat Finding tab****", vulnId);
                VulnerabilityTraceInfo.GenerateVulnTrace(Convert.ToInt32(vulnId), "Ascending");
                TabControl whsTabcontrol = SearchWhiteHatWindow.Controls["WHSTabControl"] as TabControl;
                whsTabcontrol.SelectedIndex = 1;

                Cursor.Current = Cursors.Default;
            }
            catch (Exception ex)
            {
                Cursor.Current = Cursors.Default;
                Log.Error("**** Error Occured On cell double click in Find Vulns.tab ***** ", ex);
            }
        }
        private void VSColorTheme_ThemeChanged(ThemeChangedEventArgs e)
        {
            SetDefaultColors();
        }
        /// <summary>
        ///     Handles the Click event of the pictureBoxClearSearch control to search data.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        private void PictureBoxClearSearch_Click(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                txtVulnsId.Text = string.Empty;

                BindState();
                BindSeverity();
                customDateTimePickerFromDate.Value = null;
                customDateTimePickerToDate.Value = null;

                //clear the grid
                BindAppVuln(new List<ApplicationVulnerabilityInfo.AppsVulnsDataCollection>());
                selectDefaultApp();

                txtVersion.Text = String.Format("");
                txtVulnsId.Items.Clear();
                txtVulnsId.DropDownHeight = txtVulnsId.Height;
                txtVulnsId.Refresh();



                //int applicationid = Convert.ToInt32(appsDdl.SelectedValue);
                //if (applicationid > 0)
                //{
                //    //ReBind data after clear button clicked
                //    SearchAppVuln(Convert.ToString(applicationid), txtVulnsId.Text,
                //        Convert.ToString(stateComboBox.SelectedValue), Convert.ToString(severityComboBox.SelectedValue),
                //        Convert.ToString(customDateTimePickerFromDate.Value),
                //        Convert.ToString(customDateTimePickerToDate.Value));
                //    this.dataGridViewVulnsData.Sort(this.ColumnVulnId, ListSortDirection.Ascending);
                //}
                //else
                //{
                //    //Select aaplication if not any application selected
                //    MessageBox.Show(MessageLog.SelectAnApp, MessageLog.Message, MessageBoxButtons.OK,
                //        MessageBoxIcon.Information);
                //}

                Cursor.Current = Cursors.Default;
            }
            catch (Exception ex)
            {
                Cursor.Current = Cursors.Default;
                Log.Error("**** Error Occured On cell double click in Find Vulns.tab ***** ", ex);
                MessageBox.Show("Error Occured on Search clear.", MessageLog.ErrorMessage, MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        #endregion

        #region "Method"
        void SetDefaultColors()
        {
            Color defaultBackground = CurrentThemeBackColor;
            Color defaultForeground = CurrentThemeForColor;
            BackColor = defaultBackground;
            ForeColor = defaultForeground;
            panelSearch.BackColor = defaultBackground;
            panelSearch.ForeColor = defaultForeground;
            appsDdl.BackColor = defaultBackground;
            appsDdl.ForeColor = defaultForeground;
            txtVulnsId.BackColor = defaultBackground;
            txtVulnsId.ForeColor = defaultForeground;
            stateComboBox.BackColor = defaultBackground;
            stateComboBox.ForeColor = defaultForeground;
            severityComboBox.BackColor = defaultBackground;
            severityComboBox.ForeColor = defaultForeground;
            customDateTimePickerFromDate.BackColor = defaultBackground;
            customDateTimePickerFromDate.ForeColor = defaultForeground;
            customDateTimePickerToDate.BackColor = defaultBackground;
            customDateTimePickerToDate.ForeColor = defaultForeground;
            txtFilter.BackColor = defaultBackground;
            txtFilter.ForeColor = defaultForeground;
            dataGridViewVulnsData.BackgroundColor = defaultBackground;
            dataGridViewVulnsData.ForeColor = defaultForeground;
            panelFilter.BackColor = defaultBackground;
            panelFilter.ForeColor = defaultForeground;
            dataGridViewVulnsData.DefaultCellStyle.BackColor = defaultBackground;
            dataGridViewVulnsData.DefaultCellStyle.ForeColor = defaultForeground;
            dataGridViewVulnsData.ColumnHeadersDefaultCellStyle.BackColor = defaultBackground;
            dataGridViewVulnsData.ColumnHeadersDefaultCellStyle.ForeColor = defaultForeground;
            dataGridViewVulnsData.EnableHeadersVisualStyles = false;
            dataGridViewVulnsData.GridColor = defaultBackground;
            dataGridViewVulnsData.ColumnHeadersBorderStyle = DataGridViewHeaderBorderStyle.None;
            txtVersion.BackColor = defaultBackground;
            txtVersion.ForeColor = defaultForeground;
            customDateTimePickerFromDate.CalendarForeColor = defaultForeground;
            customDateTimePickerFromDate.CalendarMonthBackground = defaultBackground;
            customDateTimePickerFromDate.CalendarTitleBackColor = defaultBackground;
            customDateTimePickerFromDate.CalendarTitleForeColor = defaultForeground;
            txtVersion.BorderStyle = BorderStyle.None;
        }
        int DropDownWidth(ComboBox myCombo)
        {
            int maxWidth = 0, temp = 0;
            foreach (var obj in myCombo.Items)
            {
                temp = TextRenderer.MeasureText(obj.ToString(), myCombo.Font).Width;
                if (temp > maxWidth)
                {
                    maxWidth = temp;
                }
            }
            return maxWidth;
        }

        /// <summary>
        ///     Binds the ComboBox for state.
        /// </summary>
        public void BindState()
        {
            try
            {
                IEnumerable<KeyValuePair<State, string>> stateList = Common.Of<State>();
                stateComboBox.DataSource = stateList;
                stateComboBox.DisplayMember = "Key";
                stateComboBox.ValueMember = "Key";
            }
            catch (Exception ex)
            {
                Log.Error("****Error Occured On binding DropDownList in Find Vulns.tab***** ", ex);
            }
        }

        /// <summary>
        ///     Binds the ComboBox for Severity.
        /// </summary>
        public void BindSeverity()
        {
            try
            {
                IEnumerable<KeyValuePair<Severity, string>> severityList = Common.Of<Severity>();
                severityComboBox.DataSource = severityList;
                severityComboBox.DisplayMember = "Key";
                severityComboBox.ValueMember = "Key";
            }
            catch (Exception ex)
            {
                Log.Error("****Error Occured On binding DropDownList in Find Vulns.tab***** ", ex);
            }
        }

        private void selectDefaultApp()
        {
            appsDdl.SelectedIndex = -1;
            appsDdl.Text = "";
            appsDdl.SelectedText = "Select an Option";
        }

        /// <summary>
        ///     Binds the apps ComboBox for Application.
        /// </summary>
        public void BindApplication()
        {
            try
            {
                List<ApplicationDetail.AppsCollection> appsCollection = BaseInstance.AppsDetail.Collection;

                //appsCollection.Add(defaultApp);
                //Common.AddItem(appsCollection, typeof(ApplicationDetail.AppsCollection), "Id", "Label", MessageLog.SelectApp);
                appsDdl.DataSource = appsCollection.OrderBy(o => o.Label).ToList();
                appsDdl.ValueMember = "Id";
                appsDdl.DisplayMember = "Label";
                appsDdl.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                appsDdl.AutoCompleteSource = AutoCompleteSource.ListItems;
                selectDefaultApp();

            }
            catch (Exception ex)
            {
                Log.Error("****Error Occured On binding DropDownList of Apps. in Find Vulns.tab***** ", ex);
            }
        }
        /// <summary>
        /// Filter Vuln Data
        /// </summary>
        /// <param name="filterText"></param>
        /// <param name="appVulns"></param>
        /// <returns></returns>
        public List<ApplicationVulnerabilityInfo.AppsVulnsDataCollection> FilterVuln(string filterText,
            List<ApplicationVulnerabilityInfo.AppsVulnsDataCollection> appVulns)
        {
            return appVulns.Where(t =>
                             t.Id.Contains(filterText) ||
                             (t.Label != null && Convert.ToString(t.Label).ToLower().Contains(filterText.ToLower())) ||
                             (t.Class_Readable != null && Convert.ToString(t.AppClass).ToLower().Contains(filterText.ToLower())) ||
                             (t.Risk != null && Convert.ToString(t.Risk).ToLower().Contains(filterText.ToLower())) ||
                             (t.Status != null && Convert.ToString(t.Status).ToLower().Contains(filterText.ToLower())) ||
                             t.Opened.ToString().Contains(filterText))
                             .ToList();
        }
        /// <summary>
        ///     Search the application vuln data grid.
        /// </summary>
        /// <param name="appId">The appId.</param>
        /// <param name="vulnId">The vuln identifier.</param>
        /// <param name="state">The state.</param>
        /// <param name="severity">The severity.</param>
        /// <param name="fromDate">From date.</param>
        /// <param name="toDate">To date.</param>
        public void SearchAppVuln(string appId, string vulnId, string state, string severity,
            string fromDate, string toDate)
        {
            try
            {
                AppVulns = new ApplicationVulnerabilityInfo.AppsVulnsData();

                if (BaseInstance.IsAuthenticatedByApiKey && !string.IsNullOrEmpty(BaseInstance.ApiKey))
                {

                    AppVulns = GetAppVulnsByKey(BaseInstance.SentinelServerName, appId, BaseInstance.ApiKey);
                }

                if (BaseInstance.SentinelCookie.Count > 0)
                {
                    AppVulns = GetAppVulns(BaseInstance.SentinelServerName, appId, BaseInstance.SentinelCookie);
                }

                if (AppVulns.Collection.Count > 0)
                {
                    foreach (ApplicationVulnerabilityInfo.AppsVulnsDataCollection apps in AppVulns.Collection)
                    {
                        txtVulnsId.Items.Add(apps.Id.ToString());
                    }
                    AppVulns.Collection.ForEach(x => x.Label = x.Application.Label);
                    if (SearchWhiteHatWindow.VisualStudioCurrentInstance != null)
                    {
                        totalVuln = SearchWhiteHatWindow.VisualStudioCurrentInstance.StatusBar;
                        totalVuln.Text = AppVulns.Collection.Count() + " " + MessageLog.VulnsFound;
                    }
                }
                else
                {
                    //MessageBox.Show("No vulnerabilities are found for the selected application.");
                }
                AppVulns.Collection = FindVulnId(vulnId, AppVulns.Collection);

                AppVulns.Collection = FindVulnDate(fromDate, toDate, AppVulns.Collection);
                BindAppVuln(AppVulns.Collection);
                AutoComplete(AppVulns.Collection);

                txtVersion.Text = String.Format("Total number of Vulnerabilities: {0}", dataGridViewVulnsData.RowCount);//AppVulns.Collection.Count

            }
            catch (Exception ex)
            {
                Log.Error("****Error Occured On binding ListView Of Vulns Find Vulns.tab***** ", ex);
            }
        }
        /// <summary>
        /// Find Vuln By id
        /// </summary>
        /// <param name="vulnId"></param>
        /// <param name="appVulns"></param>
        /// <returns></returns>
        public List<ApplicationVulnerabilityInfo.AppsVulnsDataCollection> FindVulnId(string vulnId, List<ApplicationVulnerabilityInfo.AppsVulnsDataCollection> appVulns)
        {
            if (!string.IsNullOrEmpty(vulnId))
            {
                return appVulns.Where(x => x.Id.ToString() == vulnId).ToList();
            }
            return appVulns;
        }

        /// <summary>
        /// Find Vuln By state
        /// </summary>
        /// <param name="state"></param>
        /// <param name="appVulns"></param>
        /// <returns></returns>
        public List<ApplicationVulnerabilityInfo.AppsVulnsDataCollection> FindVulnState(string state,
            List<ApplicationVulnerabilityInfo.AppsVulnsDataCollection> appVulns)
        {
            if ((!string.IsNullOrEmpty(state)) && (state.ToLower() != "both"))
            {
                return
                     appVulns.Where(x => x.Status.ToLower() == state.ToLower()).ToList();
            }
            return appVulns;
        }
        /// <summary>
        /// Find Vuln By severity
        /// </summary>
        /// <param name="severity"></param>
        /// <param name="appVulns"></param>
        /// <returns></returns>
        public List<ApplicationVulnerabilityInfo.AppsVulnsDataCollection> FindVulnSeverity(string severity,
            List<ApplicationVulnerabilityInfo.AppsVulnsDataCollection> appVulns)
        {
            if ((!string.IsNullOrEmpty(severity)) && (severity.ToLower() != "all"))
            {
                return
                      appVulns.Where(x => x.Risk.ToLower() == severity.ToLower()).ToList();
            }
            return appVulns;
        }
        /// <summary>
        /// Find Vuln by date
        /// </summary>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="appVulns"></param>
        /// <returns></returns>
        public List<ApplicationVulnerabilityInfo.AppsVulnsDataCollection> FindVulnDate(string fromDate, string toDate,
            List<ApplicationVulnerabilityInfo.AppsVulnsDataCollection> appVulns)
        {
            if (string.IsNullOrEmpty(fromDate) && string.IsNullOrEmpty(toDate))
            {
                return appVulns;
            }
            if (string.IsNullOrEmpty(fromDate))
            {
                fromDate = DateTime.UtcNow.ToString();
            }

            if (string.IsNullOrEmpty(toDate))
            {
                toDate = DateTime.UtcNow.ToString();
            }

            DateTime fromDateTime = Convert.ToDateTime(fromDate);
            DateTime toDateTime = Convert.ToDateTime(toDate);
            return
               appVulns.Where(
                     x => x.Opened.Date >= fromDateTime.Date && x.Opened.Date <= toDateTime.Date).ToList();
        }
        /// <summary>
        ///     Binds Vuln data by application.
        /// </summary>
        /// <param name="appsVulnsDataCollection">The object apps vulns data collection.</param>
        public void BindAppVuln(List<ApplicationVulnerabilityInfo.AppsVulnsDataCollection> appsVulnsDataCollection)
        {
            try
            {
                dataGridViewVulnsData.AutoGenerateColumns = false;
                SortableBindingList<ApplicationVulnerabilityInfo.AppsVulnsDataCollection> vulnData =
                    new SortableBindingList<ApplicationVulnerabilityInfo.AppsVulnsDataCollection>(appsVulnsDataCollection);


                dataGridViewVulnsData.DataSource = vulnData;
                ColumnApps.DataPropertyName = "label";
                ColumnVulnId.DataPropertyName = "id";
                ColumnClass.DataPropertyName = "class_readable";
                ColumnSeverity.DataPropertyName = "risk";
                ColumnState.DataPropertyName = "status";
                ColumnDateOpened.DataPropertyName = "opened";
                sourceCodeLocation.DataPropertyName = "location";
            }
            catch (Exception ex)
            {
                Log.Error("****Error Occured On Method of Binding gridview***** ", ex);
            }
        }

        /// <summary>
        /// Get application vuln data by APi key
        /// </summary>
        /// <param name="serverName"></param>
        /// <param name="appId"></param>
        /// <param name="apiKey"></param>
        /// <returns></returns>
        public ApplicationVulnerabilityInfo.AppsVulnsData GetAppVulnsByKey(string serverName, string appId, string apiKey)
        {
            // Get vuln data by Application By checking api key 
            string startDate = string.Empty;
            string endDate = string.Empty;
            if (!string.IsNullOrEmpty(customDateTimePickerFromDate.Text))
            {
                DateTime fromDate = DateTime.ParseExact(customDateTimePickerFromDate.Text, "MM-dd-yyyy", System.Globalization.CultureInfo.InvariantCulture);
                startDate = fromDate.ToString("yyyy-MM-dd");
            }
            if (!string.IsNullOrEmpty(customDateTimePickerToDate.Text))
            {
                DateTime toDate = DateTime.ParseExact(customDateTimePickerToDate.Text, "MM-dd-yyyy", System.Globalization.CultureInfo.InvariantCulture);
                endDate = toDate.ToString("yyyy-MM-dd");
            }

            string state = "open,closed";
            if ((!string.IsNullOrEmpty(Convert.ToString(stateComboBox.SelectedValue))) && (Convert.ToString(stateComboBox.SelectedValue).ToLower() != "both"))
            {
                state = stateComboBox.Text.ToLower();
            }
            StringBuilder severity = new StringBuilder();
            string severityText = string.Empty;
            if (severityComboBox.SelectedValue != null)
            {
                severityText = severityComboBox.SelectedValue.ToString().ToLower();
            }
            if ((!string.IsNullOrEmpty(Convert.ToString(severityComboBox.SelectedValue))) &&
                (Convert.ToString(severityComboBox.SelectedValue).ToLower() == "all"))
            {
                for (int i = 0; i < severityComboBox.Items.Count; i++)
                {
                    if (((KeyValuePair<Severity, string>)(severityComboBox.Items[i])).Value.ToLower() != "all")
                    {
                        severity.Append(((KeyValuePair<Severity, string>)(severityComboBox.Items[i])).Value.ToLower());
                        severity.Append(",");
                    }
                }

                severityText = severity.ToString().Substring(0, severity.Length - 1);
            }

            return VulnerabilityService.GetVulnData(serverName, null, appId, severityText, state, startDate, endDate, apiKey);
        }
        /// <summary>
        /// Get application vuln data by sentinel cookie
        /// </summary>
        /// <param name="serverName"></param>
        /// <param name="appId"></param>
        /// <param name="sentinelCookie"></param>
        /// <returns></returns>
        public ApplicationVulnerabilityInfo.AppsVulnsData GetAppVulns(string serverName, string appId, CookieContainer sentinelCookie)
        {
            // Get vuln data by Application By checking sentinel cookie 
            string startDate = string.Empty;
            string endDate = string.Empty;
            if (!string.IsNullOrEmpty(customDateTimePickerFromDate.Text))
            {
                DateTime fromDate = DateTime.ParseExact(customDateTimePickerFromDate.Text, "MM-dd-yyyy", System.Globalization.CultureInfo.InvariantCulture);
                startDate = fromDate.ToString("yyyy-MM-dd");
            }
            if (!string.IsNullOrEmpty(customDateTimePickerToDate.Text))
            {
                DateTime toDate = DateTime.ParseExact(customDateTimePickerToDate.Text, "MM-dd-yyyy", System.Globalization.CultureInfo.InvariantCulture);
                endDate = toDate.ToString("yyyy-MM-dd");
            }

            string state = "open,closed";
            if ((!string.IsNullOrEmpty(Convert.ToString(stateComboBox.SelectedValue))) && (Convert.ToString(stateComboBox.SelectedValue).ToLower() != "both"))
            {
                state = stateComboBox.Text.ToLower();
            }
            StringBuilder severity = new StringBuilder();
            string severityText = severityComboBox.SelectedValue.ToString().ToLower();
            if ((!string.IsNullOrEmpty(Convert.ToString(severityComboBox.SelectedValue))) &&
                (Convert.ToString(severityComboBox.SelectedValue).ToLower() == "all"))
            {
                for (int i = 0; i < severityComboBox.Items.Count; i++)
                {
                    if (((KeyValuePair<Severity, string>)(severityComboBox.Items[i])).Value.ToLower() != "all")
                    {
                        severity.Append(((KeyValuePair<Severity, string>)(severityComboBox.Items[i])).Value.ToLower());
                        severity.Append(",");
                    }
                }

                severityText = severity.ToString().Substring(0, severity.Length - 1);
            }
            return VulnerabilityService.GetVulnData(serverName, sentinelCookie, appId, severityText, state, startDate, endDate, string.Empty);
        }

        /// <summary>
        /// Validate from date and to date for search 
        /// </summary>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        public bool ValidateDate(string fromDate, string toDate)
        {
            if (string.IsNullOrEmpty(fromDate) || string.IsNullOrEmpty(toDate))
            {
                return false;
            }
            DateTime fromDateTime = Convert.ToDateTime(fromDate);
            DateTime toDateTime = Convert.ToDateTime(toDate);

            if (fromDateTime > toDateTime)
            {
                MessageBox.Show(MessageLog.SelectToDateGreaterThanFromDate, MessageLog.Message,
                    MessageBoxButtons.OK, MessageBoxIcon.Information);
                return false;
            }
            return true;
        }
        /// <summary>
        ///     Set  search  criteria
        /// </summary>
        public void SetSearchCriteria()
        {
            int appid = 0;
            string fromDate = string.Empty;
            string toDate = string.Empty;
            try
            {
                fromDate = Convert.ToString(customDateTimePickerFromDate.Value);
                toDate = Convert.ToString(customDateTimePickerToDate.Value);
                if (customDateTimePickerFromDate.Value != null)
                {
                    fromDate = Convert.ToDateTime(customDateTimePickerFromDate.Value).ToShortDateString();
                }
                if (customDateTimePickerToDate.Value != null)
                {
                    toDate = Convert.ToDateTime(customDateTimePickerToDate.Value).ToShortDateString();
                }
                appid = Convert.ToInt32(appsDdl.SelectedValue);
                //Check for if application is selected or not 
                if (appid <= 0)
                {
                    //Display message to user to select application 
                    MessageBox.Show(MessageLog.SelectAnApp, MessageLog.Message, MessageBoxButtons.OK,
                        MessageBoxIcon.Information);
                }
                else
                {
                    //Check for if date is selected by user then check for from date and to date validation
                    bool isValidDate = ValidateDate(fromDate, toDate);
                    txtVulnsId.Items.Clear();
                    txtVulnsId.DropDownHeight = txtVulnsId.Height;
                    txtVulnsId.Refresh();
                    SearchAppVuln(Convert.ToString(appid), txtVulnsId.Text,
                        Convert.ToString(stateComboBox.SelectedValue),
                        Convert.ToString(severityComboBox.SelectedValue), fromDate, toDate);
                    if (txtVulnsId.Items.Count < txtVulnsId.MaxDropDownItems)
                    {
                        txtVulnsId.DropDownHeight = txtVulnsId.Height * txtVulnsId.Items.Count;
                    }
                    else
                    {
                        txtVulnsId.DropDownHeight = txtVulnsId.Height * txtVulnsId.MaxDropDownItems;
                    }

                }
            }
            catch (Exception ex)
            {
                Log.Error("****Error Occured On Method for binding after Searching or Filtering***** ", ex);
                Log.ErrorFormat(
                    "****Error Occured On Method for binding after Searching or Filtering***** " + Environment.NewLine +
                    "**Searching parameters during error**" + Environment.NewLine + "App Id : {0}" + Environment.NewLine +
                    "Vuln Id : {1}" +
                    Environment.NewLine + "State : {2}" + Environment.NewLine + "Severity : {3}" + Environment.NewLine +
                    "From Date : {4}" + Environment.NewLine + "To Date : {5}",
                    Convert.ToString(appid), txtVulnsId.Text,
                    Convert.ToString(stateComboBox.SelectedValue), Convert.ToString(severityComboBox.SelectedValue),
                    fromDate, toDate);
            }
        }

        /// <summary>
        ///     AutoComplete the vuln Id.
        /// </summary>
        /// <param name="appsVulnsDataCollection">The object apps vulns data collection.</param>
        public void AutoComplete(List<ApplicationVulnerabilityInfo.AppsVulnsDataCollection> appsVulnsDataCollection)
        {
            try
            {
                txtVulnsId.AutoCompleteCustomSource = null;
                AutoCompleteStringCollection autoCompleteVulnItem = new AutoCompleteStringCollection();
                txtVulnsId.AutoCompleteMode = AutoCompleteMode.Suggest;
                txtVulnsId.AutoCompleteSource = AutoCompleteSource.CustomSource;
                if (appsVulnsDataCollection.Count <= 0)
                {
                    return;
                }
                foreach (ApplicationVulnerabilityInfo.AppsVulnsDataCollection vuln in appsVulnsDataCollection)
                {
                    autoCompleteVulnItem.Add(vuln.Id);
                }

                txtVulnsId.AutoCompleteCustomSource = autoCompleteVulnItem;
            }
            catch (Exception ex)
            {
                Log.Error("****Error Occured On Method for AutoComplete TextBox for Vuln. Id***** ", ex);
            }
        }
        /// <summary>
        /// Add Vulndetail Id to Vulnerability list
        /// </summary>
        /// <param name="vulnId"></param>
        public VulnerabilityInfo.Vulnerability GetVulnDetailsInfo(string vulnId)
        {
            VulnerabilityInfo.Vulnerability vulnerability = new VulnerabilityInfo.Vulnerability();
            try
            {
                //authentication by api key then get vuln detail by following 
                if (BaseInstance.IsAuthenticatedByApiKey)
                {
                    vulnerability = GetVulnDetailsByApiKey(BaseInstance.SentinelServerName, BaseInstance.ApiKey, vulnId);
                }
                //authentication by user id and password  then get vuln detail by following 
                if (BaseInstance.SentinelCookie.Count > 0 || !string.IsNullOrEmpty(BaseInstance.SentinelBrowserCookie))
                {
                    vulnerability = GetVulnDetails(BaseInstance.SentinelServerName, BaseInstance.SentinelCookie, vulnId);
                }
            }
            catch (WebException ex)
            {
                Cursor.Current = Cursors.Default;
                MessageBox.Show(ex.Message, MessageLog.ErrorMessage, MessageBoxButtons.OK, MessageBoxIcon.Error);
                Log.Error(ex.Message, ex);
            }

            return vulnerability;
        }
        /// <summary>
        /// Add vuln detail to list
        /// </summary>
        /// <param name="vulnDetail"></param>
        /// <param name="vulnList"></param>
        /// <returns></returns>
        public List<VulnerabilityInfo.Vulnerability> AddVulnDetail(VulnerabilityInfo.Vulnerability vulnDetail, List<VulnerabilityInfo.Vulnerability> vulnList)
        {
            vulnList.Add(vulnDetail);
            return vulnList;
        }
        /// <summary>
        /// Get Vuln Details By Vuln Id, APi key
        /// </summary>
        /// <param name="serverName"></param>
        /// <param name="apikey"></param>
        /// <param name="vulnId"></param>
        /// <returns></returns>
        public VulnerabilityInfo.Vulnerability GetVulnDetailsByApiKey(string serverName, string apikey, string vulnId)
        {
            return VulnerabilityService.GetVulnDetail(serverName, null, apikey, vulnId, SearchWhiteHatWindow.GetDetailsToolStripMenuItem.Checked);
        }
        /// <summary>
        /// Get Vuln Details By sentinel Cookie
        /// </summary>
        /// <param name="serverName"></param>
        /// <param name="sentinelCookie"></param>
        /// <param name="vulnId"></param>
        /// <returns></returns>
        public VulnerabilityInfo.Vulnerability GetVulnDetails(string serverName, CookieContainer sentinelCookie, string vulnId)
        {
            return VulnerabilityService.GetVulnDetail(serverName, sentinelCookie, string.Empty, vulnId, SearchWhiteHatWindow.GetDetailsToolStripMenuItem.Checked);
        }
        #endregion


    }
}