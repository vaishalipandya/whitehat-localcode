using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.ComTypes;
using System.Windows.Forms;
using EnvDTE;
using EnvDTE80;
using NUnit.Framework;
using WhiteHatSec.Entity;
using WhiteHatSec.Shared;
using WhiteHatSec.VSIX.BaseControl;
using WhiteHatSec.VSIX.UserControls;

namespace WhiteHatSec.UnitTest
{
    [TestFixture]
    public class VulnerabilityTraceTest
    {
        private readonly VulnerabilityTrace vulnerabilityTrace = new VulnerabilityTrace();

        public string ReadJsonFile()
        {
            var assembly = Assembly.GetExecutingAssembly();
            string fileContent;
            using (var stream = assembly.GetManifestResourceStream("WhiteHatSec.UnitTest.Vuln.txt"))
            {
                using (var reader = new StreamReader(stream))
                {
                    fileContent = reader.ReadToEnd();
                }
            }

            return fileContent;
        }

        public string GetExternalFolderPath()
        {
            string applicationAssemblyPath = Assembly.GetCallingAssembly().Location;
            string solutionPath = applicationAssemblyPath;
            int folderpath = solutionPath.LastIndexOf("\\", StringComparison.Ordinal);

            if (folderpath >= 0)
            {
                solutionPath = solutionPath.Substring(0, folderpath);
            }

            return solutionPath + "/" + "WebGoat-master";
        }

        public ProjectItem GetProjectItem()
        {
            return vulnerabilityTrace.FindFileInSolution("HttpOnly.java", GetCurrentInstance());
        }

        public VulnerabilityInfo.Vulnerability ConvertjsonToList()
        {
            return vulnerabilityTrace.ConvertJsonToList(ReadJsonFile());
        }

        public List<VulnerabilityInfo.Vulnerability> AddVulnDetailToList()
        {
            List<VulnerabilityInfo.Vulnerability> vulnList = new List<VulnerabilityInfo.Vulnerability>
            {
                ConvertjsonToList()
            };
            return vulnList;
        }

        public DTE2 GetCurrentInstance()
        {
            DTE dte = null;
            foreach (var item in Constant.GetInstances())
            {
                dte = item;
                break;
            }
            return (DTE2)dte;
          //  return (DTE2)System.Runtime.InteropServices.Marshal.GetActiveObject("VisualStudio.DTE");
        }

        [Test]
        public void ConvertToJsonList()
        {
            var data = vulnerabilityTrace.ConvertJsonToList(ReadJsonFile());
        }

        [Test]
        public void GetStepCollectionInfo()
        {
            vulnerabilityTrace.StepCollectionInfo = vulnerabilityTrace.GetStepCollectionInfo(ConvertjsonToList(), "35689096-56", "1");
            Assert.IsInstanceOf<VulnerabilityInfo.StepCollection>(vulnerabilityTrace.StepCollectionInfo);
        }

        [Test]
        public void FileInCurrentSolutionTest()
        {
            ProjectItem projectItem = vulnerabilityTrace.FindFileInSolution("HttpOnly.java", GetCurrentInstance());
            Assert.IsNotNull(projectItem);
        }

        [Test]
        public void FileNotExistInCurrentSolutionTest()
        {
            ProjectItem projectItem = vulnerabilityTrace.FindFileInSolution("HttpOnly1.java", GetCurrentInstance());
            Assert.IsNull(projectItem);
        }

        [Test]
        public void FileInSpecificFolderTest()
        {
            GetStepCollectionInfo();
            string applicationAssemblyPath = Assembly.GetCallingAssembly().Location;
            string solutionPath = applicationAssemblyPath;
            int folderpath = solutionPath.LastIndexOf("\\", StringComparison.Ordinal);

            if (folderpath >= 0)
            {
                solutionPath = solutionPath.Substring(0, folderpath);
            }

            string externalFolderPath = solutionPath + "/" + "WebGoat-master";
            bool actual = vulnerabilityTrace.DoFileOperation("HttpOnly.java", externalFolderPath, GetCurrentInstance());
            Assert.IsTrue(actual);
        }

        [Test]
        public void CheckOrientationTest()
        {
            vulnerabilityTrace.ChangeOrientation(Orientation.Vertical);
            Assert.AreEqual(Orientation.Vertical, vulnerabilityTrace.whsFindingSplitContainer.Orientation);
        }

        [Test]
        public void LoadFindingsSubTabTest()
        {
            BaseControl.BaseInstance.VulnerabilityList = AddVulnDetailToList();
            vulnerabilityTrace.LoadFindingsSubTab("1", "234568", "35689096-21");
            Assert.IsNotNull(vulnerabilityTrace.StepCollectionInfo);
        }

        [Test]
        public void CheckSameFileNameTest()
        {
            string actual = vulnerabilityTrace.CheckSameFileName("HttpOnly.java", "HttpOnly1.Java");
            Assert.IsNotEmpty(actual);
        }

        [Test]
        public void CheckDiffFileNameTest()
        {
            string actual = vulnerabilityTrace.CheckSameFileName("HttpOnly.java", "HttpOnly.java");
            Assert.IsEmpty(actual);
        }

        [Test]
        public void GenerateVulnTraceTest()
        {
            vulnerabilityTrace.GenerateVulnTrace(234568, "Ascending");
            Assert.AreEqual(0, BaseControl.BaseInstance.VulnerabilityList.Count);
        }

        [Test]
        public void OpenFileInCurrentSolutionTest()
        {
            bool actual = vulnerabilityTrace.OpenFile(GetProjectItem(), true, "HttpOnly.Java", GetCurrentInstance());
            Assert.IsTrue(actual);
        }

        [Test]
        public void OpenExternalFileTest()
        {
            string externalPath = Assembly.GetCallingAssembly().Location.Replace(@"\bin\Debug\nunit.framework.dll", @"\WebGoat-master");
            string filePath = externalPath +
                                        "\\src\\main\\java\\org\\owasp\\webgoat\\lessons\\HttpOnly.java";
            bool actual = vulnerabilityTrace.OpenFile(GetProjectItem(), false, filePath, GetCurrentInstance());
            Assert.IsTrue(actual);
        }

        [Test]
        public void FindFileInDirTest()
        {
            string externalPath = System.IO.Directory.GetCurrentDirectory().Replace("\\bin\\Debug", "\\WebGoat-master");
            bool actual = vulnerabilityTrace.FindFileInDir("HttpOnly.Java", externalPath, GetProjectItem(), GetCurrentInstance());
            Assert.IsTrue(actual);
        }

        [Test]
        public void CreateTreeGridTest()
        {
            vulnerabilityTrace.CreateTreeGrid(234568);
            Assert.GreaterOrEqual(vulnerabilityTrace.VulnerabilityList.Count, 0);
        }

        [Test]
        public void CreateMarkerTest()
        {
            bool actual = vulnerabilityTrace.CreateMarker(5);
            Assert.IsTrue(actual);
        }

        [Test]
        public void MethodHighlightTest()
        {
            bool actual = vulnerabilityTrace.FindMethodHighlight(GetProjectItem(), GetCurrentInstance());
            Assert.IsTrue(actual);
        }
    }
}